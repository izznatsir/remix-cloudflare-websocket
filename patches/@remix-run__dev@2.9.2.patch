diff --git a/dist/vite/cloudflare-proxy-plugin.js b/dist/vite/cloudflare-proxy-plugin.js
index a7894cceeffffa43703a3303b87ef5c068f310b4..269c5e28294a5dd31edfe091d08dcd6038e41d21 100644
--- a/dist/vite/cloudflare-proxy-plugin.js
+++ b/dist/vite/cloudflare-proxy-plugin.js
@@ -13,6 +13,8 @@
 Object.defineProperty(exports, '__esModule', { value: true });
 
 var serverRuntime = require('@remix-run/server-runtime');
+var http = require('node:http');
+var WebSocket = require('ws');
 var nodeAdapter = require('./node-adapter.js');
 
 let serverBuildId = "virtual:remix/server-build";
@@ -31,6 +33,13 @@ const cloudflareDevProxyVitePlugin = ({
   return {
     name: NAME,
     config: () => ({
+      server: {
+        hmr: {
+          // HMR must be served on a different port than the dev server
+          // so non-HMR WebSocket upgrade request is handled by the WebSocket proxy
+          port: 4173
+        }
+      },
       ssr: {
         resolve: {
           externalConditions: ["workerd", "worker"]
@@ -56,6 +65,66 @@ const cloudflareDevProxyVitePlugin = ({
       let context = {
         cloudflare
       };
+
+      // Create WebSocket proxy for Durable Object WebSocket
+      if (viteDevServer.httpServer instanceof http.Server) {
+        let wsServer = new WebSocket.Server({
+          server: viteDevServer.httpServer
+        });
+        wsServer.on("connection", async (nodeWs, nodeReq) => {
+          // Patch Node IncomingMessage to be compatible with Connect.IncomingMessage
+          nodeReq.originalUrl = nodeReq.url;
+          let build = await viteDevServer.ssrLoadModule(serverBuildId);
+          let handler = serverRuntime.createRequestHandler(build, "development");
+          let req = nodeAdapter.fromNodeRequest(nodeReq);
+          let loadContext = getLoadContext ? await getLoadContext({
+            request: req,
+            context
+          }) : context;
+          let request = nodeAdapter.fromNodeRequest(nodeReq);
+          let response = await handler(request, loadContext);
+          if (response.status !== 101 || response.webSocket === undefined) {
+            nodeWs.close();
+            return;
+          }
+          let doWs = response.webSocket;
+          doWs.accept();
+          let closedByClient = false;
+          let closedByWorkerd = false;
+          nodeWs.on("close", () => {
+            if (closedByWorkerd) {
+              closedByWorkerd = false;
+              viteDevServer.hot.send({
+                type: "full-reload"
+              });
+              return;
+            }
+            closedByClient = true;
+            doWs.close();
+          });
+          nodeWs.on("message", data => {
+            if (Array.isArray(data)) {
+              for (let datum of data) {
+                doWs.send(datum);
+              }
+            } else {
+              doWs.send(data);
+            }
+          });
+          doWs.addEventListener("close", () => {
+            if (closedByClient) {
+              closedByClient = false;
+              return;
+            }
+            closedByWorkerd = true;
+            nodeWs.close();
+          });
+          doWs.addEventListener("message", e => {
+            nodeWs.send(e.data);
+          });
+        });
+      }
+
       return () => {
         if (!viteDevServer.config.server.middlewareMode) {
           viteDevServer.middlewares.use(async (nodeReq, nodeRes, next) => {
